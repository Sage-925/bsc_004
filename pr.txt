# ==========================
# Regression Pipeline with MLflow (Based on Classification Example)
# ==========================

import numpy as np
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import warnings
warnings.filterwarnings('ignore')

import mlflow
import mlflow.sklearn
import mlflow.xgboost
from mlflow.tracking import MlflowClient

# --------------------------
# 1. Create regression dataset
# --------------------------
X, y = make_regression(
    n_samples=1000,     # number of rows
    n_features=10,      # number of input features
    noise=15,           # adds randomness
    random_state=42
)

# Split dataset into training and testing sets (70/30)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# --------------------------
# 2. Define models
# --------------------------
models = [
    (
        "Linear Regression",
        {},
        LinearRegression(),
        (X_train, y_train),
        (X_test, y_test)
    ),
    (
        "Random Forest Regressor",
        {"n_estimators": 100, "max_depth": 5},
        RandomForestRegressor(),
        (X_train, y_train),
        (X_test, y_test)
    ),
    (
        "XGB Regressor",
        {"n_estimators": 100, "max_depth": 5, "learning_rate": 0.1},
        XGBRegressor(),
        (X_train, y_train),
        (X_test, y_test)
    )
]

# --------------------------
# 3. Train, Evaluate & Collect Reports
# --------------------------
reports = []

for model_name, params, model, train_set, test_set in models:
    X_train, y_train = train_set
    X_test, y_test = test_set

    # Train model
    model.set_params(**params)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # Regression metrics
    report = {
        "MSE": mean_squared_error(y_test, y_pred),
        "MAE": mean_absolute_error(y_test, y_pred),
        "R2": r2_score(y_test, y_pred)
    }
    reports.append(report)

# --------------------------
# 4. Log Experiments with MLflow
# --------------------------
mlflow.set_experiment("Regression_Experiment")

for i, element in enumerate(models):
    model_name, params, model, train_set, test_set = element
    report = reports[i]

    with mlflow.start_run(run_name=model_name) as run:
        run_id = run.info.run_id

        # Log params & metrics
        mlflow.log_params(params)
        mlflow.log_metrics(report)

        # Log model
        if "XGB" in model_name:
            mlflow.xgboost.log_model(model, name="model")
        else:
            mlflow.sklearn.log_model(model, name="model")

        # Register model
        model_uri = f"runs:/{run_id}/model"
        mlflow.register_model(model_uri=model_uri, name=model_name)

        print(f"âœ… Model {model_name} registered with run_id: {run_id}")

# --------------------------
# 5. Promote one model to Production
# --------------------------
client = MlflowClient()

source_model = "XGB Regressor"
production_model_name = "regression-prod"

# Ensure production registry exists
try:
    client.create_registered_model(production_model_name)
except Exception:
    pass  # already exists

# Pick latest version of source model
src_versions = client.get_latest_versions(source_model)
source_version = max(int(v.version) for v in src_versions)

# Set alias & promote
client.set_registered_model_alias(source_model, "challenger", version=source_version)
new_version = client.copy_model_version(
    src_model_uri=f"models:/{source_model}@challenger",
    dst_name=production_model_name
)
client.set_registered_model_alias(production_model_name, "champion", version=new_version.version)

print(f"ðŸš€ {production_model_name} v{new_version.version} promoted to Champion!")

# --------------------------
# 6. Load Champion Model and Predict
# --------------------------
prod_model_uri = f"models:/{production_model_name}@champion"
champion_model = mlflow.xgboost.load_model(prod_model_uri)

y_pred = champion_model.predict(X_test)
print("ðŸ”® Champion model sample predictions:", y_pred[:4])